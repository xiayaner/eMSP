name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker image
        run: |
          docker build -t ${{ env.APP_NAME }}:latest .
          docker save ${{ env.APP_NAME }}:latest > ${{ env.APP_NAME }}.tar
          
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ${{ env.APP_NAME }}.tar
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      APP_NAME: emsp-account-card-service
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      APP_PORT: 8080
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .
          
      - name: Verify Docker image exists
        run: |
          if [ ! -f "$APP_NAME.tar" ]; then
            echo "错误：Docker 镜像文件不存在!"
            echo "当前目录内容:"
            ls -lah
            exit 1
          else
            echo "Docker镜像文件存在，大小: $(du -h $APP_NAME.tar)"
          fi
          
      - name: Transfer Docker image to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          port: ${{ env.SSH_PORT }}
          key: ${{ env.SSH_KEY }}
          source: "${{ env.APP_NAME }}.tar"
          target: "/tmp"
          
      - name: Deploy to ECS
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          script_timeout: 600  # 增加超时时间
          script: |
            set -e  # 任何命令失败则退出
            
            echo "===== 开始部署到阿里云 ECS ====="
            echo "当前用户: $(whoami)"
            echo "当前目录: $(pwd)"
            echo "主机信息: $(uname -a)"
            
            # 验证传输的镜像文件
            IMAGE_PATH="/tmp/$APP_NAME.tar"
            echo "验证 Docker 镜像文件: $IMAGE_PATH"
            
            if [ ! -f "$IMAGE_PATH" ]; then
              echo "错误: 文件 $IMAGE_PATH 不存在!"
              echo "当前 /tmp 目录内容:"
              ls -lah /tmp
              echo "磁盘空间信息:"
              df -h
              exit 1
            else
              echo "Docker镜像文件存在，大小: $(du -h $IMAGE_PATH)"
            fi
            
            # 停止并删除旧容器
            if docker ps -a | grep -q "$APP_NAME"; then
              echo "停止并删除旧容器..."
              docker stop $APP_NAME || true
              docker rm $APP_NAME || true
            fi
            
            # 加载新镜像
            echo "加载 Docker 镜像..."
            docker load -i $IMAGE_PATH
            
            # 运行新容器
            echo "启动新容器..."
            docker run -d \
              --name $APP_NAME \
              --restart always \
              -p $APP_PORT:8080 \
              -e DB_HOST=$DB_HOST \
              -e DB_PORT=$DB_PORT \
              -e DB_NAME=$DB_NAME \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              $APP_NAME:latest
              
            # 清理临时文件
            echo "清理临时文件..."
            rm -f $IMAGE_PATH
            
            echo "===== 部署成功完成 ====="
            echo "容器状态:"
            docker ps -f "name=$APP_NAME"
